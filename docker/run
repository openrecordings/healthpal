#!/bin/bash
echo "Creating orals-net unless exists"
docker network create --driver bridge orals-net > /dev/null  2>&1

echo "Creating and running orals-dev-db container"
docker pull postgres
docker run -d \
  --network orals-net \
  -p 5432:5432 \
  -e POSTGRES_PASSWORD=not_so_secret \
  --mount type=volume,source=orals-dev-db,target=/var/lib/postgresql/data \
  --name orals-dev-db postgres:latest

sleep 3

echo "Checking for the oarls_dev database"
# Will hold the string "t" if the database exists
db_exists=`docker exec orals-dev-db sh -c "psql -U postgres -c \"select exists(SELECT datname FROM pg_catalog.pg_database WHERE lower(datname) = lower('orals_dev'));\" | sed -n 3p"`
if [ "$db_exists" = " f" ]; then
  echo "Database not found. Creating it."
  docker exec orals-dev-db sh -c "createdb -U postgres orals_dev"
fi

echo "Creating and running orals-dev-app container"
rm -f tmp/pids/server.pid
docker run -d \
  --network orals-net \
  -p 3000:3000 \
  -e RAILS_ENV=development \
  --mount type=bind,source="$(pwd)",target=/app \
  --name orals-dev-app \
  orals-dev-app:latest

if [ "$db_exists" = " f" ]; then
  echo "Initializing and seeding the database"
  docker exec orals-dev-app sh -c "bundle exec rails db:reset"
fi

echo "Creating and running orals-dev-jobs container. Ctrl-C is safe."
docker run -d \
  --network orals-net \
  -e RAILS_ENV=development \
  --mount type=bind,source="$(pwd)",target=/app \
  --name orals-dev-jobs orals-dev-jobs:latest

echo 
echo "App is up and available at 127.0.0.1:3000"
echo 
